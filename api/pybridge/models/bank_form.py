# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BankForm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'type': 'str',
        'is_num': 'str',
        'max_length': 'Int'
    }

    attribute_map = {
        'label': 'label',
        'type': 'type',
        'is_num': 'isNum',
        'max_length': 'maxLength'
    }

    def __init__(self, label=None, type=None, is_num=None, max_length=None):  # noqa: E501
        """BankForm - a model defined in OpenAPI"""  # noqa: E501

        self._label = None
        self._type = None
        self._is_num = None
        self._max_length = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if type is not None:
            self.type = type
        if is_num is not None:
            self.is_num = is_num
        if max_length is not None:
            self.max_length = max_length

    @property
    def label(self):
        """Gets the label of this BankForm.  # noqa: E501


        :return: The label of this BankForm.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BankForm.


        :param label: The label of this BankForm.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this BankForm.  # noqa: E501


        :return: The type of this BankForm.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankForm.


        :param type: The type of this BankForm.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_num(self):
        """Gets the is_num of this BankForm.  # noqa: E501


        :return: The is_num of this BankForm.  # noqa: E501
        :rtype: str
        """
        return self._is_num

    @is_num.setter
    def is_num(self, is_num):
        """Sets the is_num of this BankForm.


        :param is_num: The is_num of this BankForm.  # noqa: E501
        :type: str
        """

        self._is_num = is_num

    @property
    def max_length(self):
        """Gets the max_length of this BankForm.  # noqa: E501


        :return: The max_length of this BankForm.  # noqa: E501
        :rtype: Int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this BankForm.


        :param max_length: The max_length of this BankForm.  # noqa: E501
        :type: Int
        """

        self._max_length = max_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankForm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
