# coding: utf-8

"""
    Bridge API

    bridgeapi.io  # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2005(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user': 'User',
        'access_token': 'str',
        'expires_at': 'str'
    }

    attribute_map = {
        'user': 'user',
        'access_token': 'access_token',
        'expires_at': 'expires_at'
    }

    def __init__(self, user=None, access_token=None, expires_at=None):  # noqa: E501
        """InlineResponse2005 - a model defined in OpenAPI"""  # noqa: E501

        self._user = None
        self._access_token = None
        self._expires_at = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if access_token is not None:
            self.access_token = access_token
        if expires_at is not None:
            self.expires_at = expires_at

    @property
    def user(self):
        """Gets the user of this InlineResponse2005.  # noqa: E501


        :return: The user of this InlineResponse2005.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this InlineResponse2005.


        :param user: The user of this InlineResponse2005.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def access_token(self):
        """Gets the access_token of this InlineResponse2005.  # noqa: E501


        :return: The access_token of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this InlineResponse2005.


        :param access_token: The access_token of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def expires_at(self):
        """Gets the expires_at of this InlineResponse2005.  # noqa: E501


        :return: The expires_at of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this InlineResponse2005.


        :param expires_at: The expires_at of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
